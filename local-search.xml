<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>WPF中的资源词典的引用问题</title>
    <link href="/2024/06/02/WPF%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E8%AF%8D%E5%85%B8%E7%9A%84%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <url>/2024/06/02/WPF%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E8%AF%8D%E5%85%B8%E7%9A%84%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="WPF中的资源词典的引用问题"><a href="#WPF中的资源词典的引用问题" class="headerlink" title="WPF中的资源词典的引用问题"></a>WPF中的资源词典的引用问题</h3><blockquote><p>1.在App.xaml中引用资源时,是可以跨程序集进行引用的，例如App.xaml中在引用另外两个<code>Dictionary3.xaml</code>和<code>Dictionary4.xaml</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xaml">&lt;Application x:Class=&quot;WpfApp2.App&quot;<br>             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;<br>             xmlns:local=&quot;clr-namespace:WpfApp2&quot;<br>             StartupUri=&quot;Window1.xaml&quot;&gt;<br>    &lt;Application.Resources&gt;<br>        &lt;ResourceDictionary&gt;<br>            &lt;ResourceDictionary.MergedDictionaries&gt;<br>                &lt;ResourceDictionary Source=&quot;pack://application:,,,/WpfControlLibrary1;component/Dictionary3.xaml&quot;/&gt;<br>                &lt;ResourceDictionary Source=&quot;pack://application:,,,/WpfControlLibrary1;component/Dictionary4.xaml&quot;/&gt;<br>            &lt;/ResourceDictionary.MergedDictionaries&gt;<br>        &lt;/ResourceDictionary&gt;<br>    &lt;/Application.Resources&gt;<br>&lt;/Application&gt;<br></code></pre></td></tr></table></figure><blockquote><p>Dictionary3.xaml 中定义了<code>dictionary3Color</code>的颜色资源</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xaml">&lt;ResourceDictionary xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>                    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&gt;<br>    &lt;SolidColorBrush x:Key=&quot;dictionary3&quot; Color=&quot;Red&quot;/&gt;<br>    &lt;!--定义了一个颜色字典--&gt;<br>    &lt;Color x:Key=&quot;dictionary3Color&quot; &gt;#FFFF0000&lt;/Color&gt;<br>&lt;/ResourceDictionary&gt;<br></code></pre></td></tr></table></figure><blockquote><p>Dictionary4.xaml中定义了<code>dictionary4</code>的<code>SolidColorBrush</code>对Dictionary3.xaml中的引用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xaml">&lt;ResourceDictionary xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>                    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&gt;<br>    &lt;SolidColorBrush x:Key=&quot;dictionary4&quot; Color=&quot;&#123;StaticResource dictionary3Color&#125;&quot;/&gt;<br>&lt;/ResourceDictionary&gt;<br></code></pre></td></tr></table></figure><h4 id="这时启动程序后-会发现dictionary4是可以跨资源正常引用用dictionary3的"><a href="#这时启动程序后-会发现dictionary4是可以跨资源正常引用用dictionary3的" class="headerlink" title="- 这时启动程序后,会发现dictionary4是可以跨资源正常引用用dictionary3的"></a>- 这时启动程序后,会发现<code>dictionary4</code>是可以跨资源正常引用用<code>dictionary3</code>的</h4><blockquote><p><strong>2.再新建一个<code>dictionary2</code>的资源,然后再App.xaml中引用它</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xaml">&lt;Application x:Class=&quot;WpfApp2.App&quot;<br>             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;<br>             xmlns:local=&quot;clr-namespace:WpfApp2&quot;<br>             StartupUri=&quot;Window1.xaml&quot;&gt;<br>    &lt;Application.Resources&gt;<br>        &lt;ResourceDictionary&gt;<br>            &lt;ResourceDictionary.MergedDictionaries&gt;<br>                &lt;ResourceDictionary Source=&quot;pack://application:,,,/WpfControlLibrary1;component/Dictionary2.xaml&quot;/&gt;<br>            &lt;/ResourceDictionary.MergedDictionaries&gt;<br>        &lt;/ResourceDictionary&gt;<br>    &lt;/Application.Resources&gt;<br>&lt;/Application&gt;<br></code></pre></td></tr></table></figure><p>然后在<code>dictionary2</code>中引用<code>dictionary3</code>和<code>dictionary4</code>资源，如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xaml">&lt;ResourceDictionary xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>                    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&gt;<br><br>    &lt;ResourceDictionary.MergedDictionaries&gt;<br>        &lt;ResourceDictionary Source=&quot;pack://application:,,,/WpfControlLibrary1;component/Dictionary3.xaml&quot;/&gt;<br>        &lt;ResourceDictionary Source=&quot;pack://application:,,,/WpfControlLibrary1;component/Dictionary1.xaml&quot;/&gt;<br>    &lt;/ResourceDictionary.MergedDictionaries&gt;<br>&lt;/ResourceDictionary&gt;<br></code></pre></td></tr></table></figure><h4 id="这时再运行程序-会发现找不到StaticResource-dictionary3Color的资源-通过这个可以发现-在App-xaml中的资源是可以跨资源集进行访问的"><a href="#这时再运行程序-会发现找不到StaticResource-dictionary3Color的资源-通过这个可以发现-在App-xaml中的资源是可以跨资源集进行访问的" class="headerlink" title="这时再运行程序,会发现找不到StaticResource dictionary3Color的资源,通过这个可以发现,在App.xaml中的资源是可以跨资源集进行访问的,"></a>这时再运行程序,会发现找不到<code>StaticResource dictionary3Color</code>的资源,通过这个可以发现,在App.xaml中的资源是可以跨资源集进行访问的,</h4><h4 id="除了底层App-Xaml中的之外的资源的中-资源是不能进行跨程序集进行访问的-不过StaticResource换成DynamicResource是可以通过程序找到的"><a href="#除了底层App-Xaml中的之外的资源的中-资源是不能进行跨程序集进行访问的-不过StaticResource换成DynamicResource是可以通过程序找到的" class="headerlink" title="除了底层App.Xaml中的之外的资源的中,资源是不能进行跨程序集进行访问的,不过StaticResource换成DynamicResource是可以通过程序找到的,"></a>除了底层App.Xaml中的之外的资源的中,资源是不能进行跨程序集进行访问的,不过<code>StaticResource</code>换成<code>DynamicResource</code>是可以通过程序找到的,</h4><h4 id="不过这种方式-性能比StaticResource的资源要差。"><a href="#不过这种方式-性能比StaticResource的资源要差。" class="headerlink" title="不过这种方式,性能比StaticResource的资源要差。"></a>不过这种方式,性能比<code>StaticResource</code>的资源要差。</h4><p>引用参考</p><p>[1] <a href="https://blog.lindexi.com/post/WPF-%E5%B7%B2%E7%9F%A5%E9%97%AE%E9%A2%98-%E8%B5%84%E6%BA%90%E5%AD%97%E5%85%B8%E6%A0%91%E5%BC%95%E7%94%A8%E4%B8%8E%E8%B5%84%E6%BA%90%E5%AF%BB%E6%89%BE%E7%9A%84%E5%9D%91.html">WPF已知问题 资源字典树引用与资源寻找的坑-林德熙</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>WPF中的行为(Behaviors)</title>
    <link href="/2024/04/22/WPF%E4%B8%AD%E7%9A%84%E8%A1%8C%E4%B8%BA(Behaviors)/"/>
    <url>/2024/04/22/WPF%E4%B8%AD%E7%9A%84%E8%A1%8C%E4%B8%BA(Behaviors)/</url>
    
    <content type="html"><![CDATA[<p>WPF中的行为(Behaviors)</p><p><strong>行为</strong>是Blend中自带的资产,控件的界面逻辑大都可以认为是一个单独的实例,且可以添加多个行为(如TextBox聚焦后的全选),本质行为也是通过附加属性实现的,也继承<code>DependencyProperty</code></p><blockquote><p>Behavior的引入</p></blockquote><p>需要添加Nugut包:<strong>Microsoft.Xaml.Behaviors.Wpf</strong>包,引入<code>Xaml</code>的命名空间:<strong>xmlns:i&#x3D;”<a href="http://schemas.microsoft.com/xaml/behaviors">http://schemas.microsoft.com/xaml/behaviors</a>“</strong>,类中间引用</p><p><strong>using Microsoft.Xaml.Behaviors;</strong></p><h6 id="下面通过一个小例子来说明-通过按下Button清除TextBox中的内容"><a href="#下面通过一个小例子来说明-通过按下Button清除TextBox中的内容" class="headerlink" title="下面通过一个小例子来说明(通过按下Button清除TextBox中的内容)"></a>下面通过一个小例子来说明(通过按下<code>Button</code>清除<code>TextBox中</code>的内容)</h6><blockquote><p><strong>1.定义Button的行为类</strong></p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MyBehaviors</span>:<span class="hljs-title">Behavior</span>&lt;<span class="hljs-title">Button</span>&gt;<br>&#123;<br>    <span class="hljs-keyword">public</span> TextBox Target<br>    &#123;<br>        <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> (TextBox)GetValue(TargetProperty); &#125;<br>        <span class="hljs-keyword">set</span> &#123; SetValue(TargetProperty, <span class="hljs-keyword">value</span>); &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Using a DependencyProperty as the backing store for Target.  This enables animation, styling, binding, etc...</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> DependencyProperty TargetProperty =<br>        DependencyProperty.Register(<span class="hljs-string">&quot;Target&quot;</span>, <span class="hljs-keyword">typeof</span>(TextBox), <span class="hljs-keyword">typeof</span>(MyBehaviors), <span class="hljs-keyword">new</span> PropertyMetadata(<span class="hljs-literal">null</span>));<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyBehaviors</span>()</span><br>    &#123;<br>        <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnAttached</span>()</span><br>    &#123;<br>        AssociatedObject.Click += AssociatedObject_Click;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AssociatedObject_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, RoutedEventArgs e</span>)</span><br>    &#123;<br>        Target.Clear();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>2.behaviors的用法</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xaml">      &lt;StackPanel Orientation=&quot;Vertical&quot;&gt;<br>          &lt;TextBox x:Name=&quot;Textbox&quot; Text=&quot;输入框&quot;/&gt;<br>          &lt;Button Content=&quot;点击&quot; Background=&quot;Gray&quot; Panel.ZIndex=&quot;1&quot;<br>Height=&quot;20&quot; Style=&quot;&#123;StaticResource ButtonStyle&#125;&quot; <br>local:ButtonHelp.ButtonCornerRadius=&quot;6&quot;&gt;<br>            &lt;!--这里定义了行为--!&gt;<br>              &lt;behavior:Interaction.Behaviors&gt;<br>                  &lt;local:MyBehaviors Target=&quot;&#123;Binding ElementName=Textbox&#125;&quot;/&gt;<br>              &lt;/behavior:Interaction.Behaviors&gt;<br>          &lt;/Button&gt;<br>      &lt;/StackPanel&gt;<br></code></pre></td></tr></table></figure><p><strong><a href="https://github.com/Microsoft/XamlBehaviorsWpf">(Behaviors)行为的地址</a></strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
